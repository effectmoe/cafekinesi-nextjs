{"version":3,"file":"index.js","sources":["../src/utils/index.ts","../src/components/RelativeDateTimePicker.tsx","../src/components/TimezoneButton.tsx","../src/components/TimezoneSelector.tsx","../src/components/RichDateInput.tsx","../src/schema.ts","../src/index.ts"],"sourcesContent":["import {getTimeZones} from '@vvo/tzdb'\nimport {formatInTimeZone} from 'date-fns-tz'\n\nimport {NormalizedTimeZone} from '../types'\n\nexport const unlocalizeDateTime = (datetime: string, timezone: string): string => {\n  return formatInTimeZone(datetime, timezone, 'yyyy-MM-dd HH:mm:ss')\n}\n\n/* We have to \"fake\" a UTC date to make the datepicker look \"right\"\n * to the user. For example, if someone sets 7:00AM PST, which is 3PM UTC\n * and I am on the east coast, I want to have 12:00PM UTC, which will look like 7:00AM to me\n * In other words, UTC minus 3 hours, or (UTC(my offset - their offset))\n * this is purely cosmetic and should not be saved at all\n */\nexport const getConstructedUTCDate = (utc: string, offset: number): string => {\n  const date = new Date(utc)\n  const currentOffset = date.getTimezoneOffset() * -1\n  const diff = currentOffset - offset\n  const fakeUTCDate = new Date(date.getTime() - diff * 60 * 1000)\n  return fakeUTCDate.toISOString()\n}\n\n//keep some consistency with scheduled publishing\n//https://github.com/sanity-io/sanity-plugin-scheduled-publishing/blob/bb282e3df9a8a73df37fab8ee1fdd0e2430745be/src/hooks/useTimeZone.tsx#L17\nexport const allTimezones = getTimeZones().map((tz) => {\n  return {\n    abbreviation: tz.abbreviation,\n    alternativeName: tz.alternativeName,\n    mainCities: tz.mainCities.join(', '),\n    // Main time zone name 'Africa/Dar_es_Salaam'\n    name: tz.name,\n    // Time zone name with underscores removed\n    namePretty: tz.name.replaceAll('_', ' '),\n    offset: tz.currentTimeFormat.split(' ')[0],\n    // all searchable text - this is transformed before being rendered in `<AutoComplete>`\n    value: `${tz.currentTimeFormat} ${tz.abbreviation} ${tz.name}`,\n    currentTimeOffsetInMinutes: tz.currentTimeOffsetInMinutes,\n    group: tz.group,\n  } as NormalizedTimeZone\n})\n","import {formatInTimeZone, getTimezoneOffset, zonedTimeToUtc} from 'date-fns-tz'\nimport {type ReactNode, useCallback} from 'react'\nimport {DateTimeInput, FormPatch, InputProps, PatchEvent, set, unset} from 'sanity'\n\nimport {RichDate} from '../types'\nimport {getConstructedUTCDate, unlocalizeDateTime} from '../utils'\n\ninterface RelativeDateTimePickerProps extends Omit<InputProps, 'renderDefault'> {\n  dateValue?: RichDate\n}\nexport const RelativeDateTimePicker = (props: RelativeDateTimePickerProps): ReactNode => {\n  const {dateValue: value, onChange} = props\n\n  const handleDateChange = useCallback(\n    (patch: FormPatch | PatchEvent | FormPatch[]) => {\n      const timezone = value?.timezone ?? Intl.DateTimeFormat().resolvedOptions().timeZone\n      const newDatetime = (patch as unknown as {value: string})?.value\n      if (!newDatetime || !('type' in patch) || patch.type !== 'set') {\n        onChange(unset())\n        return\n      }\n\n      /* get what time the user \"meant\" to set without tz info\n       * right now, newDatetime is the time the user set plus\n       * their current offset, not the timezone offset\n       */\n      const desiredDateTime = unlocalizeDateTime(\n        newDatetime,\n        Intl.DateTimeFormat().resolvedOptions().timeZone,\n      )\n\n      const newUtcDateObject = zonedTimeToUtc(desiredDateTime, timezone)\n      // offset may have changed based on DST, capture that\n      const newOffset = getTimezoneOffset(timezone, newUtcDateObject) / 60 / 1000\n      const localDate = formatInTimeZone(newUtcDateObject, timezone, \"yyyy-MM-dd'T'HH:mm:ssXXX\")\n\n      const patches = []\n\n      patches.push(set(newUtcDateObject.toISOString(), ['utc']))\n      patches.push(set(localDate, ['local']))\n\n      if (!value?.timezone) {\n        patches.push(set(timezone, ['timezone']))\n      }\n\n      if (value?.offset !== newOffset) {\n        patches.push(set(newOffset, ['offset']))\n      }\n\n      onChange(patches)\n    },\n    [onChange, value],\n  )\n\n  const dateToDisplay = value?.utc ? getConstructedUTCDate(value.utc, value.offset) : ''\n\n  // @ts-expect-error -- slight mismatch in elementProps and renderDefault, but should line up in practice\n  return <DateTimeInput {...props} onChange={handleDateChange} value={dateToDisplay} />\n}\n","import {EarthAmericasIcon} from '@sanity/icons'\nimport {Button} from '@sanity/ui'\nimport {type ReactNode} from 'react'\n\nimport {allTimezones} from '../utils'\n\ninterface TimezoneButtonProps {\n  onClick: () => void\n  timezone: string\n}\n\nexport const TimezoneButton = (props: TimezoneButtonProps): ReactNode => {\n  const {onClick, timezone} = props\n  const currentTimezone = Intl.DateTimeFormat().resolvedOptions().timeZone\n\n  const label =\n    allTimezones.find((tz) => tz.name === timezone)?.abbreviation ??\n    allTimezones.find((tz) => tz.name === currentTimezone)?.abbreviation ??\n    allTimezones.find((tz) => tz.group.includes(currentTimezone))?.abbreviation\n\n  return (\n    <Button\n      fontSize={1}\n      style={{width: '100%'}}\n      justify={'flex-start'}\n      icon={EarthAmericasIcon}\n      mode=\"ghost\"\n      onClick={onClick}\n      text={`${label}`}\n      aria-label=\"Select a timezone\"\n    />\n  )\n}\n","import {SearchIcon} from '@sanity/icons'\nimport {Autocomplete, Box, Card, Text} from '@sanity/ui'\nimport {formatInTimeZone, getTimezoneOffset, zonedTimeToUtc} from 'date-fns-tz'\nimport {type ReactNode, useCallback} from 'react'\nimport {ObjectInputProps, set} from 'sanity'\n\nimport {NormalizedTimeZone, RichDate} from '../types'\nimport {allTimezones, unlocalizeDateTime} from '../utils'\n\ninterface TimezoneSelectorProps {\n  onChange: Pick<ObjectInputProps, 'onChange'>['onChange']\n  value?: RichDate\n}\n\nexport const TimezoneSelector = (props: TimezoneSelectorProps): ReactNode => {\n  const {onChange, value} = props\n  const currentTz = allTimezones.find((tz) => tz.name === value?.timezone)\n  const userTzName = Intl.DateTimeFormat().resolvedOptions().timeZone\n  const userTz = (allTimezones.find((tz) => tz.name === userTzName) ??\n    allTimezones.find((tz) => tz.group.includes(userTzName)))!\n\n  const handleTimezoneChange = useCallback(\n    (selectedTz: string) => {\n      const newTimezone =\n        allTimezones.find((tz) => tz.value === selectedTz) ?? (userTz as NormalizedTimeZone)\n\n      const timezonePatch = set(newTimezone.name, ['timezone'])\n      const patches = [timezonePatch]\n\n      // then, recalculate UTC and local from \"old\" time with the new offset\n      if (value?.utc) {\n        const desiredDateTime = unlocalizeDateTime(value.utc, value.timezone)\n        const newUtcDateObject = zonedTimeToUtc(desiredDateTime, newTimezone.name)\n        const newOffset = getTimezoneOffset(newTimezone.name, newUtcDateObject) / 60 / 1000\n        const newLocalDate = formatInTimeZone(\n          newUtcDateObject.toISOString(),\n          newTimezone.name,\n          \"yyyy-MM-dd'T'HH:mm:ssXXX\",\n        )\n        patches.push(set(newUtcDateObject.toISOString(), ['utc']))\n        patches.push(set(newLocalDate, ['local']))\n        patches.push(set(newOffset, ['offset']))\n      }\n      onChange(patches)\n    },\n    [onChange, userTz, value],\n  )\n\n  return (\n    // taken from Scheduled Publishing, again!\n    // https://github.com/sanity-io/sanity-plugin-scheduled-publishing/blob/bb282e3df9a8a73df37fab8ee1fdd0e2430745be/src/components/dialogs/DialogTimeZone.tsx#L100\n    <Box padding={4}>\n      <Autocomplete\n        fontSize={2}\n        icon={SearchIcon}\n        id=\"timezone\"\n        onChange={handleTimezoneChange}\n        openButton\n        options={allTimezones}\n        padding={4}\n        placeholder=\"Search for a city or time zone\"\n        popover={{\n          boundaryElement: document.querySelector('body'),\n          constrainSize: true,\n          placement: 'bottom-start',\n        }}\n        // eslint-disable-next-line react/jsx-no-bind\n        renderOption={(option) => {\n          return (\n            <Card as=\"button\" padding={3}>\n              <Text size={1} textOverflow=\"ellipsis\">\n                <span>GMT{option.offset}</span>\n                <span style={{fontWeight: 500, marginLeft: '1em'}}>{option.alternativeName}</span>\n                <span style={{marginLeft: '1em'}}>{option.mainCities}</span>\n              </Text>\n            </Card>\n          )\n        }}\n        // eslint-disable-next-line react/jsx-no-bind\n        renderValue={(_, option) => {\n          if (!option) return ''\n          return `${option.alternativeName} (${option.namePretty})`\n        }}\n        tabIndex={-1}\n        value={currentTz?.value ?? userTz.value}\n      />\n    </Box>\n  )\n}\n","import {Box, Dialog, Flex} from '@sanity/ui'\nimport {type ReactNode, useCallback, useState} from 'react'\nimport {ObjectInputMember, ObjectInputProps} from 'sanity'\n\nimport {RichDate} from '../types'\nimport {RelativeDateTimePicker} from './RelativeDateTimePicker'\nimport {TimezoneButton} from './TimezoneButton'\nimport {TimezoneSelector} from './TimezoneSelector'\n\nexport const RichDateInput = (props: ObjectInputProps): ReactNode => {\n  const {onChange, value, members, schemaType} = props\n  const {options} = schemaType\n  const localMember = members.find((member) => member.kind === 'field' && member.name === 'local')\n  const timezoneMember = members.find(\n    (member) => member.kind === 'field' && member.name === 'timezone',\n  )\n  const [timezoneSelectorOpen, setTimezoneSelectorOpen] = useState(false)\n  const onClose = useCallback(() => setTimezoneSelectorOpen(false), [])\n  const onOpen = useCallback(() => setTimezoneSelectorOpen(true), [])\n\n  return (\n    <>\n      <Flex>\n        <Box flex={[1, 2, 4]}>\n          {localMember && (\n            <ObjectInputMember\n              {...props}\n              member={localMember}\n              // eslint-disable-next-line react/jsx-no-bind\n              renderInput={(renderInputProps) => (\n                <RelativeDateTimePicker\n                  {...renderInputProps}\n                  dateValue={value as RichDate}\n                  schemaType={{...renderInputProps.schemaType, options}}\n                  onChange={onChange}\n                />\n              )}\n            />\n          )}\n        </Box>\n        <Box flex={[1]} marginLeft={[2, 2, 3, 4]}>\n          {timezoneMember && (\n            <ObjectInputMember\n              {...props}\n              member={timezoneMember}\n              // eslint-disable-next-line react/jsx-no-bind\n              renderInput={() => (\n                <TimezoneButton onClick={onOpen} timezone={value?.timezone ?? ''} />\n              )}\n            />\n          )}\n        </Box>\n      </Flex>\n      {timezoneSelectorOpen && (\n        <Dialog onClose={onClose} header=\"Select a timezone\" id=\"timezone-select\" width={1}>\n          <TimezoneSelector onChange={onChange} value={value as RichDate} />\n        </Dialog>\n      )}\n    </>\n  )\n}\n","import {\n  DatetimeDefinition,\n  defineField,\n  defineType,\n  ObjectDefinition,\n  ObjectSchemaType,\n} from 'sanity'\n\nimport {RichDateInput} from './components/RichDateInput'\n\nconst richDateTypeName = 'richDate' as const\n\nexport type RichDateSchemaType = Omit<ObjectSchemaType, 'options'> & {\n  options?: DatetimeDefinition['options']\n}\n\n/**\n *  @public\n */\nexport interface RichDateDefinition extends Omit<ObjectDefinition, 'type' | 'fields' | 'options'> {\n  type: typeof richDateTypeName\n  options?: DatetimeDefinition['options']\n}\n\ndeclare module 'sanity' {\n  //allows the custom input to be valid for the schema def\n  export interface IntrinsicDefinitions {\n    richDate: RichDateDefinition\n  }\n}\n\nexport const richDateSchema = defineType({\n  name: richDateTypeName,\n  title: 'Rich Date',\n  type: 'object',\n  fields: [\n    defineField({\n      name: 'local',\n      title: 'Local',\n      type: 'string',\n    }),\n    defineField({\n      name: 'utc',\n      title: 'UTC',\n      type: 'string',\n    }),\n    defineField({\n      name: 'timezone',\n      title: 'Timezone',\n      type: 'string',\n    }),\n    defineField({\n      name: 'offset',\n      title: 'Offset',\n      type: 'number',\n    }),\n  ],\n\n  components: {\n    input: RichDateInput,\n  },\n})\n","import {definePlugin} from 'sanity'\n\nimport {RichDateDefinition, richDateSchema, RichDateSchemaType} from './schema'\nimport {RichDate} from './types'\n\nexport const richDate = definePlugin({\n  name: 'v3-rich-date-input',\n  schema: {\n    types: [richDateSchema],\n  },\n})\n\nexport type {RichDate, RichDateDefinition, RichDateSchemaType}\n"],"names":["unlocalizeDateTime","datetime","timezone","formatInTimeZone","getConstructedUTCDate","utc","offset","date","Date","currentOffset","getTimezoneOffset","diff","fakeUTCDate","getTime","toISOString","allTimezones","getTimeZones","map","tz","abbreviation","alternativeName","mainCities","join","name","namePretty","replaceAll","currentTimeFormat","split","value","concat","currentTimeOffsetInMinutes","group","RelativeDateTimePicker","props","dateValue","onChange","handleDateChange","useCallback","patch","_a","Intl","DateTimeFormat","resolvedOptions","timeZone","newDatetime","type","unset","desiredDateTime","newUtcDateObject","zonedTimeToUtc","newOffset","localDate","patches","push","set","dateToDisplay","DateTimeInput","TimezoneButton","_b","_c","_d","_e","onClick","currentTimezone","label","find","includes","jsx","Button","fontSize","style","width","justify","icon","EarthAmericasIcon","mode","text","TimezoneSelector","currentTz","userTzName","userTz","handleTimezoneChange","selectedTz","newTimezone","timezonePatch","newLocalDate","Box","padding","children","Autocomplete","SearchIcon","id","openButton","options","placeholder","popover","boundaryElement","document","querySelector","constrainSize","placement","renderOption","option","Card","as","jsxs","Text","size","textOverflow","fontWeight","marginLeft","renderValue","_","tabIndex","RichDateInput","members","schemaType","localMember","member","kind","timezoneMember","timezoneSelectorOpen","setTimezoneSelectorOpen","useState","onClose","onOpen","Fragment","Flex","flex","ObjectInputMember","renderInput","renderInputProps","Dialog","header","richDateTypeName","richDateSchema","defineType","title","fields","defineField","components","input","richDate","definePlugin","schema","types"],"mappings":"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"}