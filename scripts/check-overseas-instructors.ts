import { createClient } from '@sanity/client'
import * as dotenv from 'dotenv'

dotenv.config({ path: '.env.local' })

const client = createClient({
  projectId: process.env.NEXT_PUBLIC_SANITY_PROJECT_ID!,
  dataset: process.env.NEXT_PUBLIC_SANITY_DATASET!,
  token: process.env.SANITY_WRITE_TOKEN!,
  apiVersion: '2024-01-01',
  useCdn: false,
})

async function checkOverseasInstructors() {
  try {
    console.log('üîç Êµ∑Â§ñ„Ç§„É≥„Çπ„Éà„É©„ÇØ„Çø„Éº„ÅÆ„Éá„Éº„Çø„ÇíÁ¢∫Ë™ç‰∏≠...\n')

    // „Ç¢„É°„É™„Ç´„Å®„É®„Éº„É≠„ÉÉ„Éë„ÅÆ„Ç§„É≥„Çπ„Éà„É©„ÇØ„Çø„Éº„ÇíÂèñÂæó
    const query = `*[_type == "instructor" && (region == "„Ç¢„É°„É™„Ç´" || region == "„É®„Éº„É≠„ÉÉ„Éë") && isActive == true] {
      _id,
      name,
      title,
      region,
      slug,
      isActive,
      "publishedAt": _updatedAt
    }`

    const instructors = await client.fetch(query)

    console.log('üìä ÂèñÂæóÁµêÊûú:')
    console.log(`  „Ç§„É≥„Çπ„Éà„É©„ÇØ„Çø„ÉºÊï∞: ${instructors.length}Âêç\n`)

    if (instructors.length > 0) {
      instructors.forEach((instructor: any) => {
        console.log(`  üåè ${instructor.region}: ${instructor.name}`)
        console.log(`     - „Çø„Ç§„Éà„É´: ${instructor.title || '„Å™„Åó'}`)
        console.log(`     - „Çπ„É©„ÉÉ„Ç∞: ${instructor.slug?.current || '„Å™„Åó'}`)
        console.log(`     - „Ç¢„ÇØ„ÉÜ„Ç£„Éñ: ${instructor.isActive}`)
        console.log(`     - ÊúÄÁµÇÊõ¥Êñ∞: ${instructor.publishedAt}\n`)
      })
    } else {
      console.log('  ‚ö†Ô∏è  Êµ∑Â§ñ„Ç§„É≥„Çπ„Éà„É©„ÇØ„Çø„Éº„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü')
    }

    // ÂÖ®„Ç§„É≥„Çπ„Éà„É©„ÇØ„Çø„Éº„ÅÆÂú∞ÂüüÂà•ÈõÜË®à
    const allInstructors = await client.fetch(`*[_type == "instructor" && isActive == true] {
      region
    }`)

    const regionCounts: { [key: string]: number } = {}
    allInstructors.forEach((instructor: any) => {
      if (instructor.region) {
        regionCounts[instructor.region] = (regionCounts[instructor.region] || 0) + 1
      }
    })

    console.log('üìç Âú∞ÂüüÂà•„Ç§„É≥„Çπ„Éà„É©„ÇØ„Çø„ÉºÊï∞:')
    Object.entries(regionCounts).sort().forEach(([region, count]) => {
      console.log(`  ${region}: ${count}Âêç`)
    })

  } catch (error) {
    console.error('‚ùå „Ç®„É©„Éº:', error)
  }
}

checkOverseasInstructors()
