#!/usr/bin/env npx tsx

import { createClient } from '@sanity/client'
import { config } from 'dotenv'

config({ path: '.env.local' })

const client = createClient({
  projectId: 'e4aqw590',
  dataset: 'production',
  apiVersion: '2024-01-01',
  token: process.env.SANITY_API_TOKEN,
  useCdn: false
})

/**
 * AI-First„Éû„Ç§„Ç∞„É¨„Éº„Ç∑„Éß„É≥„Çπ„ÇØ„É™„Éó„Éà
 * Êó¢Â≠ò„ÅÆ„Éá„Éº„Çø„Åã„ÇâPerson„Ç®„É≥„ÉÜ„Ç£„ÉÜ„Ç£„ÇíËá™ÂãïÁîüÊàê
 */

async function migrateToAIFirst() {
  console.log('üöÄ AI-FirstÊßãÈÄ†„Å∏„ÅÆÁßªË°åÈñãÂßã...')

  const persons: any[] = []

  // 1. ProfilePageÔºà‰ª£Ë°®ËÄÖÔºâ„Åã„ÇâPerson‰ΩúÊàê
  console.log('\nüìç ‰ª£Ë°®ËÄÖÊÉÖÂ†±„ÇíÂèñÂæó‰∏≠...')
  const profile = await client.fetch(`*[_type == "profilePage"][0]`)

  if (profile?.profileSection) {
    const representativePerson = {
      _id: 'person-yukari-hoshi',
      _type: 'person',
      name: profile.profileSection.name || 'Êòü „É¶„Ç´„É™',
      roles: ['representative', 'founder', 'instructor'],
      primaryRole: '‰ª£Ë°®ËÄÖ„ÉªÂâµÊ•≠ËÄÖ',

      // AIÊ§úÁ¥¢ÊúÄÈÅ©Âåñ
      aiSearchKeywords: [
        '‰ª£Ë°®', '‰ª£Ë°®ËÄÖ', 'ÂâµÊ•≠ËÄÖ', 'ÂâµÂßãËÄÖ', 'founder', 'CEO',
        'Êòü', '„É¶„Ç´„É™', 'Êòü„É¶„Ç´„É™', 'yukari', 'hoshi',
        '„Ç´„Éï„Çß„Ç≠„Éç„Ç∑‰ª£Ë°®', '„Ç´„Éï„Çß„Ç≠„Éç„Ç∑ÂâµÊ•≠ËÄÖ',
        '„Å©„Çì„Å™‰∫∫', 'Ë™∞„Åå‰Ωú„Å£„Åü', 'Ë®≠Á´ãËÄÖ'
      ],

      aiContext: {
        commonQuestions: [
          '‰ª£Ë°®ËÄÖ„ÅØ„Å©„Çì„Å™‰∫∫„Åß„Åô„ÅãÔºü',
          'ÂâµÊ•≠ËÄÖ„Å´„Å§„ÅÑ„Å¶Êïô„Åà„Å¶',
          '„Ç´„Éï„Çß„Ç≠„Éç„Ç∑„ÅØË™∞„Åå‰Ωú„Å£„Åü„ÅÆÔºü',
          'Êòü„É¶„Ç´„É™„Åï„Çì„Å´„Å§„ÅÑ„Å¶'
        ],
        responseTemplate: 'Cafe Kinesi„ÅÆ‰ª£Ë°®ËÄÖ„ÅØÊòü„É¶„Ç´„É™„Åï„Çì„Åß„Åô„ÄÇ2010Âπ¥„Å´„Ç´„Éï„Çß„Ç≠„Éç„Ç∑„ÇíÂâµÊ•≠„Åó„ÄÅË™∞„ÇÇ„Åå„Çª„É©„Éî„Çπ„Éà„Å´„Å™„Çå„Çã‰∏ñÁïå„ÇíÁõÆÊåá„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ'
      },

      aiPriority: 10, // ÊúÄÈ´òÂÑ™ÂÖàÂ∫¶

      profile: {
        birthName: profile.profileSection.nameReading || '„É®„Ç∑„Ç´„ÉØ „É¶„Ç´„É™',
        location: profile.profileSection.location || 'Èï∑ÈáéÁúåËåÖÈáéÂ∏ÇÂú®‰Ωè',
        specialties: ['„Ç≠„Éç„Ç∑„Ç™„É≠„Ç∏„Éº', '„Ç¢„É≠„Éû„ÉÜ„É©„Éî„Éº', '„Ç´„Éï„Çß„Ç≠„Éç„Ç∑', '„Éî„Éº„ÉÅ„Çø„ÉÉ„ÉÅ'],
        qualifications: [
          '„Ç≠„Éç„Ç∑„Ç™„É≠„Ç∏„Éº„Çª„É©„Éî„Çπ„Éà',
          '„Ç¢„É≠„Éû„ÉÜ„É©„Éî„Çπ„Éà',
          'Little Tree „Çª„Éü„Éä„Éº‰∏ªÂÇ¨ËÄÖ'
        ],
        philosophy: 'ÂøÖË¶Å„Å™„ÅÆ„ÅØ„ÅÇ„Å™„Åü„ÅÆÊÑõ„Å®„ÅÇ„Å™„Åü„ÅÆÊâã„ÄÇË™∞„ÇÇ„Åå„Çª„É©„Éî„Çπ„Éà„Å´„Å™„Çå„Çã‰∏ñÁïå„ÇíÂâµ„Çä„Åü„ÅÑ„ÄÇ',
        message: '„Ç´„Éï„Çß„Ç≠„Éç„Ç∑„ÅØ2010Âπ¥„Åã„ÇâÂßã„Åæ„Å£„ÅüÁßÅ„ÅÆÂ§¢„ÅÆÁµêÊô∂„Åß„Åô„ÄÇ'
      },

      activities: profile.activitiesItems?.map((item: any) => ({
        title: item.title,
        description: '',
        isActive: true
      })) || [],

      isActive: true
    }

    persons.push(representativePerson)
    console.log('‚úÖ ‰ª£Ë°®ËÄÖPerson‰ΩúÊàê: Êòü„É¶„Ç´„É™')
  }

  // 2. InstructorÔºà„Ç§„É≥„Çπ„Éà„É©„ÇØ„Çø„ÉºÔºâ„Åã„ÇâPerson‰ΩúÊàê
  console.log('\nüìç „Ç§„É≥„Çπ„Éà„É©„ÇØ„Çø„ÉºÊÉÖÂ†±„ÇíÂèñÂæó‰∏≠...')
  const instructors = await client.fetch(`*[_type == "instructor"]`)

  for (const instructor of instructors) {
    const instructorPerson = {
      _id: `person-instructor-${instructor._id}`,
      _type: 'person',
      name: instructor.name,
      roles: ['instructor'],
      primaryRole: '„Ç§„É≥„Çπ„Éà„É©„ÇØ„Çø„Éº',

      // AIÊ§úÁ¥¢ÊúÄÈÅ©Âåñ
      aiSearchKeywords: [
        '„Ç§„É≥„Çπ„Éà„É©„ÇØ„Çø„Éº', 'Ë¨õÂ∏´', 'ÂÖàÁîü',
        instructor.name,
        ...(instructor.specialties || [])
      ],

      aiContext: {
        commonQuestions: [
          `${instructor.name}„Åï„Çì„Å´„Å§„ÅÑ„Å¶Êïô„Åà„Å¶`,
          `${instructor.location}„ÅÆ„Ç§„É≥„Çπ„Éà„É©„ÇØ„Çø„Éº„ÅØÔºü`
        ],
        responseTemplate: `${instructor.name}„Åï„Çì„ÅØ„ÄÅ${instructor.location || ''}„ÅßÊ¥ªÂãï„Åô„ÇãCafe Kinesi„Ç§„É≥„Çπ„Éà„É©„ÇØ„Çø„Éº„Åß„Åô„ÄÇ`
      },

      aiPriority: 5,

      profile: {
        location: instructor.location,
        specialties: instructor.specialties,
        qualifications: [],
        biography: instructor.experience,
        philosophy: '',
        message: instructor.description
      },

      isActive: true
    }

    persons.push(instructorPerson)
    console.log(`‚úÖ „Ç§„É≥„Çπ„Éà„É©„ÇØ„Çø„ÉºPerson‰ΩúÊàê: ${instructor.name}`)
  }

  // 3. AuthorÔºàËëóËÄÖÔºâ„Åã„ÇâPerson‰ΩúÊàê
  console.log('\nüìç ËëóËÄÖÊÉÖÂ†±„ÇíÂèñÂæó‰∏≠...')
  const authors = await client.fetch(`*[_type == "author"]`)

  for (const author of authors) {
    // Tony‰ª•Â§ñ„ÅÆËëóËÄÖ„ÅÆ„ÅøÔºàTony„ÅØÈáçË§á„ÇíÈÅø„Åë„ÇãÔºâ
    if (!author.name?.includes('Tony')) {
      const authorPerson = {
        _id: `person-author-${author._id}`,
        _type: 'person',
        name: author.name,
        roles: ['author'],
        primaryRole: 'ËëóËÄÖ',

        aiSearchKeywords: [
          'ËëóËÄÖ', '„É©„Ç§„Çø„Éº',
          author.name
        ],

        aiPriority: 3,

        profile: {
          biography: author.bio
        },

        isActive: true
      }

      persons.push(authorPerson)
      console.log(`‚úÖ ËëóËÄÖPerson‰ΩúÊàê: ${author.name}`)
    }
  }

  // 4. Cafe KinesiÁµÑÁπî„Ç®„É≥„ÉÜ„Ç£„ÉÜ„Ç£„Çí‰ΩúÊàê
  console.log('\nüìç ÁµÑÁπîÊÉÖÂ†±„Çí‰ΩúÊàê‰∏≠...')
  const organization = {
    _id: 'organization-cafe-kinesi',
    _type: 'organization',
    name: 'Cafe Kinesi',
    tagline: '„Å†„Çå„Åß„ÇÇ„Å©„Åì„Åß„ÇÇÁ∞°Âçò„Å´„Åß„Åç„Çã„Ç≠„Éç„Ç∑„Ç™„É≠„Ç∏„Éº„Å®„Ç¢„É≠„Éû„Çí‰Ωø„Å£„ÅüÂÅ•Â∫∑Ê≥ï',
    established: '2010Âπ¥',

    aiSearchKeywords: [
      '„Ç´„Éï„Çß„Ç≠„Éç„Ç∑', 'Cafe Kinesi', 'cafekinesi',
      '‰ºöÁ§æ', 'ÁµÑÁπî', '„Å©„Çì„Å™‰ºöÁ§æ', '„Å©„Çì„Å™ÁµÑÁπî'
    ],

    aiElevatorPitch: '„Ç´„Éï„Çß„Ç≠„Éç„Ç∑„ÅØ„ÄÅË™∞„Åß„ÇÇ2ÊôÇÈñì„Åß„Ç§„É≥„Çπ„Éà„É©„ÇØ„Çø„Éº„Å´„Å™„Çå„Çã„ÄÅ„Ç≠„Éç„Ç∑„Ç™„É≠„Ç∏„Éº„Å®„Ç¢„É≠„Éû„Çí‰Ωø„Å£„Åü‰∏ñÁïåÊúÄÈÄü„ÅÆ„Çª„É©„Éî„Éº„Åß„Åô„ÄÇ',

    mission: 'Ë™∞„ÇÇ„Åå„Çª„É©„Éî„Çπ„Éà„Å´„Å™„Çå„Çã‰∏ñÁïå„ÇíÂâµ„Çã',
    vision: '‰∏ñÁïå‰∏≠„ÅÆ‰∫∫„ÄÖ„Åå„Çπ„Éà„É¨„Çπ„Åã„ÇâËß£Êîæ„Åï„Çå„ÄÅËá™ÂàÜ„Çâ„Åó„ÅèÁîü„Åç„Çâ„Çå„ÇãÁ§æ‰ºö',
    values: [
      '„Ç∑„É≥„Éó„É´„ÅßÂäπÊûúÁöÑ',
      'Ê•Ω„Åó„Åø„Å™„Åå„Çâ„Åß„Åç„Çã',
      'Ë™∞„Åß„ÇÇ„Åß„Åç„Çã'
    ],

    history: [
      { year: '2010Âπ¥2Êúà', event: '„Ç´„Éï„Çß„Ç≠„Éç„Ç∑„ÅÆÂèñ„ÇäÁµÑ„ÅøÈñãÂßã' },
      { year: '2011Âπ¥2Êúà', event: 'Ê≠£ÂºèÁô∫Ë°®' }
    ],

    achievements: [
      '‰∏ñÁïå‰∏≠„Å´„Ç§„É≥„Çπ„Éà„É©„ÇØ„Çø„ÉºÂ±ïÈñã',
      '2ÊôÇÈñì„Åß„Ç§„É≥„Çπ„Éà„É©„ÇØ„Çø„ÉºÈ§äÊàê',
      '5„Å§„ÅÆ„Ç∑„É™„Éº„Ç∫Â±ïÈñã'
    ],

    isActive: true
  }

  // ÁµêÊûú„ÇíË°®Á§∫
  console.log('\n========== ÁßªË°å„Çµ„Éû„É™„Éº ==========')
  console.log(`‚úÖ Person „Ç®„É≥„ÉÜ„Ç£„ÉÜ„Ç£: ${persons.length}‰ª∂`)
  console.log(`‚úÖ Organization „Ç®„É≥„ÉÜ„Ç£„ÉÜ„Ç£: 1‰ª∂`)
  console.log('\nÁßªË°å„Éá„Éº„Çø:')
  persons.forEach(p => {
    console.log(`  - ${p.name} (${p.primaryRole}) ÂÑ™ÂÖàÂ∫¶: ${p.aiPriority}`)
  })

  // ÂÆüÈöõ„ÅÆ„Éá„Éº„Çø‰ΩúÊàê
  console.log('\nüî• ÂÆüÈöõ„ÅÆ„Éá„Éº„Çø„Çí‰ΩúÊàê‰∏≠...')

  // Person„Éá„Éº„Çø„Çí‰ΩúÊàê
  for (const person of persons) {
    try {
      await client.create(person)
      console.log(`‚úÖ Created: ${person.name}`)
    } catch (error) {
      console.error(`‚ùå Failed: ${person.name}`, error)
    }
  }

  // Organization„Çí‰ΩúÊàê
  try {
    await client.create(organization)
    console.log(`‚úÖ Created: Cafe Kinesi Organization`)
  } catch (error) {
    console.error(`‚ùå Failed: Organization`, error)
  }

  console.log('\n========== Ê¨°„ÅÆ„Çπ„ÉÜ„ÉÉ„Éó ==========')
  console.log('1. npx sanity deploy „Åß„Çπ„Ç≠„Éº„Éû„Çí„Éá„Éó„É≠„Ç§')
  console.log('2. Sanity Studio„ÅßÊñ∞„Åó„ÅÑPerson„Ç®„É≥„ÉÜ„Ç£„ÉÜ„Ç£„ÇíÁ¢∫Ë™ç')
  console.log('3. ÊâãÂãï„ÅßÁ¢∫Ë™çÂæå„ÄÅ„Åì„ÅÆ„Çπ„ÇØ„É™„Éó„Éà„ÅÆ„Ç≥„É°„É≥„Éà„ÇíËß£Èô§„Åó„Å¶ÂÆüË°å')
  console.log('4. Êó¢Â≠ò„ÅÆprofilePage„ÄÅinstructor„ÄÅauthor„ÅØÊÆµÈöéÁöÑ„Å´ÂªÉÊ≠¢')
}

// ÂÆüË°å
migrateToAIFirst()
  .then(() => {
    console.log('\n‚ú® ÁßªË°åÊ∫ñÂÇôÂÆå‰∫Ü')
    process.exit(0)
  })
  .catch(error => {
    console.error('‚ùå „Ç®„É©„Éº:', error)
    process.exit(1)
  })