#!/usr/bin/env npx tsx

import { config } from 'dotenv';
import { VercelVectorStore } from '../lib/vector/vercel-vector-store';
import { sql } from '@vercel/postgres';

config({ path: '.env.local' });

async function testDirectKeywords() {
  console.log('üîç Áõ¥Êé•„Ç≠„Éº„ÉØ„Éº„Éâ„Åß„ÅÆÊ§úÁ¥¢„ÉÜ„Çπ„Éà...\n');

  try {
    // 1. „Åæ„Åö„ÄÅ„Éá„Éº„Çø„Éô„Éº„Çπ„ÅÆÁä∂Ê≥Å„ÇíÂÜçÁ¢∫Ë™ç
    console.log('üìä „Éá„Éº„Çø„Éô„Éº„ÇπÁä∂Ê≥ÅÁ¢∫Ë™ç:');
    const dbCheck = await sql`
      SELECT source, COUNT(*) as count
      FROM embeddings
      GROUP BY source
      ORDER BY count DESC
    `;

    dbCheck.rows.forEach(row => {
      console.log(`  ${row.source}: ${row.count}‰ª∂`);
    });

    // 2. ai-first-service„ÅÆÂÆüÈöõ„ÅÆ„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÇíÁ¢∫Ë™ç
    console.log('\nüìÑ ai-first-service „Ç≥„É≥„ÉÜ„É≥„ÉÑÁ¢∫Ë™ç:');
    const serviceContent = await sql`
      SELECT content, metadata
      FROM embeddings
      WHERE source = 'ai-first-service'
      LIMIT 3
    `;

    serviceContent.rows.forEach((row, index) => {
      const metadata = typeof row.metadata === 'string' ? JSON.parse(row.metadata) : row.metadata;
      console.log(`\n${index + 1}. ${metadata.name}:`);
      console.log(`   Content: ${row.content.substring(0, 200)}...`);
    });

    // 3. „Éô„ÇØ„Éà„É´„Çπ„Éà„Ç¢„ÅßÁï∞„Å™„Çã„ÇØ„Ç®„É™„Çí„ÉÜ„Çπ„Éà
    const vectorStore = new VercelVectorStore();
    await vectorStore.initialize();

    const testQueries = [
      'service',
      'course',
      'cafekinesi',
      '„Ç´„Éï„Çß„Ç≠„Éç„Ç∑',
      'Ë¨õÂ∫ß',
      '„Ç≥„Éº„Çπ',
      'kinesi',
      '„ÉÅ„É£„ÇØ„É©',
      '„Éî„Éº„ÉÅ„Çø„ÉÉ„ÉÅ',
      '„Å©„ÅÆ„Çà„ÅÜ„Å™Ë¨õÂ∫ß',
      '„Å©„Çì„Å™Ë¨õÂ∫ß',
      '„Å©„ÅÆ„Çà„ÅÜ„Å™Ë¨õÂ∫ß„Åå„ÅÇ„Çä„Åæ„Åô„Åã',
      '„Ç´„Éï„Çß„Ç≠„Éç„Ç∑„Ç™„É≠„Ç∏„Éº',
      '„Ç´„Éï„Çß„Ç≠„Éç„Ç∑„Ç™„É≠„Ç∏„Éº„ÅÆË¨õÂ∫ß'
    ];

    for (const query of testQueries) {
      console.log(`\nüîç „ÇØ„Ç®„É™: "${query}"`);

      // ÊúÄ‰ΩéÈñæÂÄ§Ôºà0.0Ôºâ„ÅßÊ§úÁ¥¢
      const results = await vectorStore.hybridSearch(query, {
        topK: 10,
        threshold: 0.0  // ÊúÄ‰ΩéÈñæÂÄ§
      });

      const serviceResults = results.filter(r => r.source === 'ai-first-service');
      console.log(`  ÂÖ®ÁµêÊûú: ${results.length}‰ª∂, ServiceÁµêÊûú: ${serviceResults.length}‰ª∂`);

      if (serviceResults.length > 0) {
        console.log('  üéØ ServiceÊ§úÁ¥¢ÊàêÂäüÔºÅ');
        serviceResults.forEach((result, index) => {
          const metadata = typeof result.metadata === 'string' ?
            JSON.parse(result.metadata) : result.metadata;
          const score = result.combined_score || result.vector_score || 0;
          console.log(`    ${index + 1}. [${score.toFixed(3)}] ${metadata.name}`);
        });

        // ÊàêÂäü„Åó„ÅüÂ†¥Âêà„ÅØ„ÄÅË©≥Á¥∞„ÇíË°®Á§∫„Åó„Å¶ÁµÇ‰∫Ü
        break;
      }
    }

    // 4. ÂÖ®„Éá„Éº„Çø„ÅÆ‰∏ä‰Ωç10‰ª∂„ÇíË°®Á§∫ÔºàÈñæÂÄ§„Å™„ÅóÔºâ
    console.log('\nüìã ÂÖ®„Éá„Éº„Çø„ÅÆ‰∏ä‰Ωç10‰ª∂ÔºàÈñæÂÄ§„Å™„ÅóÔºâ:');
    const allResults = await vectorStore.hybridSearch('Ë¨õÂ∫ß', {
      topK: 10,
      threshold: 0.0
    });

    allResults.forEach((result, index) => {
      const metadata = typeof result.metadata === 'string' ?
        JSON.parse(result.metadata) : result.metadata;
      const score = result.combined_score || result.vector_score || 0;
      console.log(`${index + 1}. [${score.toFixed(3)}] ${result.source}: ${metadata.name || 'unknown'}`);
    });

  } catch (error) {
    console.error('‚ùå „ÉÜ„Çπ„Éà„Ç®„É©„Éº:', error);
  }
}

testDirectKeywords();