import { config } from 'dotenv';
import { resolve } from 'path';
import { publicClient } from '../lib/sanity.client';
import { groq } from 'next-sanity';

config({ path: resolve(process.cwd(), '.env.local') });

async function checkFaq() {
  console.log('üîç Sanity„Åã„Çâ„Äå„Åä„Åô„Åô„ÇÅ„É°„Éã„É•„Éº„ÄçFAQ„ÇíÊ§úÁ¥¢...\n');

  try {
    const faqs = await publicClient.fetch(groq`
      *[_type == "faq" && question match "*„Åä„Åô„Åô„ÇÅ„É°„Éã„É•„Éº*"] {
        _id,
        question,
        answer,
        category,
        order
      }
    `);

    console.log('üìã Ë¶ã„Å§„Åã„Å£„ÅüFAQ:', faqs.length, '‰ª∂\n');

    faqs.forEach((faq: any) => {
      console.log(`ID: ${faq._id}`);
      console.log(`Ë≥™Âïè: ${faq.question}`);
      console.log(`ÂõûÁ≠î: ${faq.answer}`);
      console.log(`„Ç´„ÉÜ„Ç¥„É™:`, faq.category);
      console.log('');
    });

    // ÂÖ®„Å¶„ÅÆFAQ„ÇíÁ¢∫Ë™ç
    const allFaqs = await publicClient.fetch(groq`
      *[_type == "faq"] | order(_createdAt desc) [0...20] {
        _id,
        question,
        answer
      }
    `);

    console.log('üìö ÊúÄÊñ∞20‰ª∂„ÅÆFAQ:\n');
    allFaqs.forEach((faq: any, idx: number) => {
      console.log(`${idx + 1}. ${faq.question}`);
      console.log(`   ÂõûÁ≠î: ${faq.answer?.substring(0, 80)}...`);
      console.log('');
    });

  } catch (error) {
    console.error('‚ùå „Ç®„É©„Éº:', error);
  }
}

checkFaq();
